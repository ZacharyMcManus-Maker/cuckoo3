#!/bin/bash

#####################
##### Variables #####
#####################

LATEST_SUPPORTED_PYTHON_VERSION=python3.10
DEFAULT_ROOT=/opt/cuckoo3/static
RED='\e[31m'
NC='\e[0m'

#########################
##### Flight checks #####
#########################

# Ensure the script is run as root
if [[ $(id -u) -ne 0 ]]; then
    echo -e "\n#################\n### ${RED}Attention${NC} ###\n#################"
    echo "This script must be run with sudo privileges to manage system-related tasks."
    echo "Please enter your password to run as sudo: "
    exec sudo bash "$0" "$@"

    if [[ $? -ne 0 ]]; then
        echo "Failed to obtain sudo privileges. Exiting"
        exit 1
    fi
fi

#####################
##### Templates #####
#####################

### Install Cuckoo ###
install_cuckoo_with() {
    local python_version="$1"
    cat << EOF
if [[ ! -d cuckoo3 ]]; then
    git clone https://github.com/ZacharyMcManus-Maker/cuckoo3.git
fi
cd cuckoo3
git switch main && git pull
if [[ ! -d venv ]]; then
    echo -e "\n### Initiating new virtualenv ###"
    $python_version -m venv venv
    echo -e "\n### Activating virtualenv ###"
    source venv/bin/activate
    echo -e "\n### Installing wheel and requests ###"
    $python_version -m pip install -U wheel requests
    echo -e "\n### Installing dependencies ###"
    for repo in peepdf sflock roach httpreplay; do
        $python_version -m pip install -U git+https://github.com/cert-ee/\$repo
    done
    declare -a pkglist=("./common" "./processing" "./machineries" "./web" "./node" "./core")
    echo -e "\n### Installing Cuckoo packages ###"
    for pkg in \${pkglist[@]}; do
        if [[ ! -d "\$pkg" ]]; then
            echo "Missing package: \$pkg"
            exit 1
        fi

        $python_version -m pip install -e "\$pkg"
        if [[ \$? -ne 0 ]]; then
            echo "Install of \$pkg failed"
            exit 1
        fi
    done
fi
# Create Cuckoo3 cwd folder
if [[ ! -d ~/.cuckoocwd ]]; then
    echo -e "\n### Creating Cuckoo3 cwd folder ###"
    cuckoo createcwd
fi
EOF
}

### Configure Cuckoo ###
configure_cuckoo_for() {
    local username="$1"
    cat << EOF
cd ~/cuckoo3
source venv/bin/activate
# Import monitor binaries and extract signatures
echo -e "\n### Importing monitor binaries ###"
cuckoo getmonitor monitor.zip &>/dev/null
echo -e "\n### Extracting signatures ###"
unzip -o -d ~/.cuckoocwd/signatures/cuckoo signatures.zip &>/dev/null
echo -e "\n### Building documentation ###"
cd docs
pip install -r requirements.txt
mkdocs build
cp -R site ../web/cuckoo/web/static/docs
cuckoo web djangocommand collectstatic --noinput
echo -e "\n### Generating Ngix and UWSGI configuration ###"
cuckoo web generateconfig --uwsgi > /home/$username/cuckoo3/cuckoo-web.ini
cuckoo web generateconfig --nginx > /home/$username/cuckoo3/cuckoo-web.conf
echo -e "\n### Migrating databases ###"
cuckoomigrate database all
EOF
}

### Configure VMs for Cuckoo ###
configure_vms_for() {
    local username="$1"
    cat << EOF
echo -e "\n### Importing VMs to Cuckoo ###"
cd ~/cuckoo3
source venv/bin/activate
cuckoo machine import qemu /home/$username/.vmcloak/vms/qemu
echo -e "\n### Deleting example configurations ###"
cuckoo machine delete qemu example1
EOF
}

### Run Cuckoo ###
run_cuckoo_for() {
    local username="$1"
    cat << EOF
cd /home/$username/cuckoo3
source venv/bin/activate
cuckoo
EOF
}

############################
##### Helper functions #####
############################

generate_section_header() {
    local name="$1"
    local header="### $name ###"
    local top_bottom=$(printf '%*s' "${#header}" '' | tr ' ' '#')
    echo -e "\n$top_bottom\n$header\n$top_bottom\n"
}

run_as_cuckoo() {
    local username="$1"
    local commands="$2"
    su - "$username" -c "$commands"
}

########################################
##### Get existing user information #####
########################################

generate_section_header "User Selection"

echo -e "${RED}NOTE!${NC} Please select the Cuckoo user that was created in the first script."
read < /dev/tty -p "Would you like to use an existing Cuckoo user? [y/n]: " use_existing_user
if [[  ! "$use_existing_user" =~ ^[yn]$ ]]; then
    echo "Please enter valid values next time"
    exit 1
fi

if [[ $use_existing_user == "y" ]]; then
    generate_section_header "Setting Cuckoo3 user"
    read < /dev/tty -p "Please enter the name of the existing Cuckoo user: " username
    if [[ ! $(id -u $username) ]]; then
        echo -e "### ${RED}Attention!${NC} Provided user '$username' does not exist ###"
        read < /dev/tty -p "Please enter the name of the existing Cuckoo user: " username
        if [[ ! $(id -u $username) ]]; then
            echo -e "### ${RED}Attention!${NC} Provided user '$username' does not exist ###"
            echo -e "Please run the first script to create a Cuckoo user first\n"
            exit 1
        fi
    fi
else
    echo -e "Please run the first script (create-user-vms.sh) to create a Cuckoo user first."
    exit 1
fi

generate_section_header "Web options"
echo "Cuckoo uses Django to serve the web. It requires a location to store all static assets (default - /opt/cuckoo3/static)"
read < /dev/tty -p "Please enter the full path of Cuckoo static root (press enter to use default): " cuckoo_web_static_root
if [[ $cuckoo_web_static_root == "" ]]; then
    cuckoo_web_static_root=$DEFAULT_ROOT
fi
echo "Cuckoo static root is set to: $cuckoo_web_static_root"

#######################################
##### Install system dependencies #####
#######################################

generate_section_header "Installing system dependencies"

apt-get update
apt-get install -yq libhyperscan5 libhyperscan-dev \
    libjpeg8-dev zlib1g-dev p7zip-full rar unace-nonfree cabextract \
    yara \
    tcpdump \
    libssl-dev libcapstone-dev \
    uwsgi uwsgi-plugin-python3 \
    nginx

##############################
##### Installing Cuckoo3 #####
##############################

generate_section_header "Installing Cuckoo3"
run_as_cuckoo "$username" "$(install_cuckoo_with "$LATEST_SUPPORTED_PYTHON_VERSION")"

#####################################
##### Cuckoo user configuration #####
#####################################

generate_section_header "Configuring user $username"

echo -e "\n### Adding cuckoo user to kvm group ###"
sudo adduser $username kvm && sudo chmod 666 /dev/kvm

echo -e "\n### Configuring tcpdump for $username ###"
sudo groupadd pcap
sudo adduser $username pcap
sudo chgrp pcap /usr/bin/tcpdump
sudo setcap cap_net_raw,cap_net_admin=eip /usr/bin/tcpdump

echo -e "\n### Adding Cuckoo permission to tcpdump profile in apparmor ###"
sudo sed -i 's|audit deny @{HOME}/.\*/\*\* mrwkl,|audit deny @{HOME}/.[^c]\*/\*\* mrwkl,\n  audit deny @{HOME}/.c[^u]\*/\*\* mrwkl,\n  audit deny @{HOME}/.cu[^c]\*/\*\* mrwkl,\n  audit deny @{HOME}/.cuc[^k]\*/\*\* mrwkl,\n  audit deny @{HOME}/.cuck[^o]\*/\*\* mrwkl,\n  audit deny @{HOME}/.cucko[^o]\*/\*\* mrwkl,\n  audit deny @{HOME}/.cuckoo[^c]\*/\*\* mrwkl,\n  audit deny @{HOME}/.cuckooc[^w]\*/\*\* mrwkl,\n  audit deny @{HOME}/.cuckoocw[^d]\*/\*\* mrwkl,\n  audit deny @{HOME}/.cuckoocwd?\*/\*\* mrwkl,|g' /etc/apparmor.d/usr.bin.tcpdump
sudo apparmor_parser -r /etc/apparmor.d/usr.bin.tcpdump

#########################
##### Cuckoo3 setup #####
#########################

generate_section_header "Configuring Cuckoo3"

run_as_cuckoo "$username" "$(configure_vms_for "$username")"

#######################
###### Cuckoo Web #####
#######################

generate_section_header "Setting up Cuckoo3 Web"

echo -e "\n### Configuring Web ###"
sudo sed -i 's/allowed_subnets: 127.0.0.0\/8,10.0.0.0\/8/allowed_subnets: 127.0.0.0\/8,10.0.0.0\/8,192.168.68.0\/24/g' /home/$username/.cuckoocwd/conf/web/web.yaml
sudo sed -i "s|# STATIC_ROOT = \"\"|STATIC_ROOT = \"$cuckoo_web_static_root\"|g" /home/$username/.cuckoocwd/web/web_local_settings.py

echo -e "\n### Creating static root ###"
sudo mkdir -p $cuckoo_web_static_root
sudo chown -R $username:$username $cuckoo_web_static_root
sudo adduser www-data "$username"
run_as_cuckoo "$username" "$(configure_cuckoo_for "$username")"

echo -e "\n### Creating UWSGI and Nginx configuration ###"
sudo rm /etc/uwsgi/apps-enabled/cuckoo-web.ini 2&>/dev/null
sudo mv /home/$username/cuckoo3/cuckoo-web.ini /etc/uwsgi/apps-available/
sudo ln -s /etc/uwsgi/apps-available/cuckoo-web.ini /etc/uwsgi/apps-enabled/cuckoo-web.ini

sudo rm /etc/nginx/sites-enabled/cuckoo-web.conf 2&>/dev/null
sudo rm /etc/nginx/sites-enabled/default 2&>/dev/null
sudo mv /home/$username/cuckoo3/cuckoo-web.conf /etc/nginx/sites-available/cuckoo-web.conf
sudo ln -s /etc/nginx/sites-available/cuckoo-web.conf /etc/nginx/sites-enabled/cuckoo-web.conf
sudo sed -i 's/listen 127.0.0.1:8000/listen 8080/g' /etc/nginx/sites-available/cuckoo-web.conf

echo -e "\n### Restarting UWSGI and Nginx ###"
sudo systemctl restart nginx
sudo systemctl restart uwsgi

######################
##### Run Cuckoo #####
######################

generate_section_header "Running cuckoo in debug mode"
run_as_cuckoo "$username" "$(run_cuckoo_for "$username")"

echo -e "\nCuckoo3 installation completed successfully!"
